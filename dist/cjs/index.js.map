{
  "version": 3,
  "sources": ["../../src/instantiateFFTWModuleFromFile.ts", "../../src/FFTW.ts"],
  "sourcesContent": ["import type { FFTWModuleFactory } from \"./types\";\n\n/**\n * Load emcc-wasm files, than instantiate it\n * @param jsFile path to `emcc-wasm.js`\n * @param wasmFile path to `emcc-wasm.wasm`\n * @param dataFile path to `emcc-wasm.data`\n */\nconst instantiateFFTWModuleFromFile = async (jsFile: string, wasmFile = jsFile.replace(/c?js$/, \"wasm\"), dataFile = jsFile.replace(/c?js$/, \"data\")) => {\n    let Module: FFTWModuleFactory;\n    // let dataBinary: ArrayBuffer;\n    let wasmBinary: Uint8Array | ArrayBuffer;\n    const jsCodeHead = /var (.+) = \\(\\(\\) => \\{/;\n    if (typeof globalThis.fetch === \"function\") {\n        let jsCode = await (await fetch(jsFile)).text();\n        jsCode = `${jsCode}\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = URL.createObjectURL(new Blob([jsCode], { type: \"text/javascript\" }));\n        Module = (await import(/* webpackIgnore: true */jsFileMod)).default;\n        // dataBinary = await (await fetch(dataFile)).arrayBuffer();\n        wasmBinary = new Uint8Array(await (await fetch(wasmFile)).arrayBuffer());\n    } else {\n        const { promises: fs } = await import(\"fs\");\n        const { pathToFileURL } = await import(\"url\");\n        let jsCode = (await fs.readFile(jsFile, { encoding: \"utf-8\" }));\n        jsCode = `\nimport process from \"process\";\nimport * as path from \"path\";\nimport { createRequire } from \"module\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst __filename = fileURLToPath(import.meta.url);\nconst require = createRequire(import.meta.url);\n\n${jsCode}\n\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = jsFile.replace(/c?js$/, \"mjs\");\n        await fs.writeFile(jsFileMod, jsCode);\n        Module = (await import(/* webpackIgnore: true */pathToFileURL(jsFileMod).href)).default;\n        await fs.unlink(jsFileMod);\n        // dataBinary = (await fs.readFile(dataFile)).buffer;\n        wasmBinary = (await fs.readFile(wasmFile)).buffer;\n    }\n    const module = await Module({\n        wasmBinary/*,\n        getPreloadedPackage: (remotePackageName: string, remotePackageSize: number) => {\n            if (remotePackageName === \"libfaust-wasm.data\") return dataBinary;\n            return new ArrayBuffer(0);\n        }*/\n    });\n    return module;\n};\n\nexport default instantiateFFTWModuleFromFile;\n", "import type { FFT, FFTWModule } from \"./types\";\r\n\r\nclass FFTW {\r\n    c2c: { FFT1D: new (size: number) => FFT; FFT2D: new (n0: number, n1: number) => FFT; };\r\n    r2c: { FFT1D: new (size: number) => FFT; };\r\n    r2r: { FFT1D: new (size: number) => FFT; DCT1D: new (size: number) => FFT; DST1D: new (size: number) => FFT; FFT2D: new (n0: number, n1: number) => FFT; DCT2D: new (n0: number, n1: number) => FFT; DST2D: new (n0: number, n1: number) => FFT; };\r\n    constructor(fftwModule: FFTWModule) {\r\n        const FFTW_ESTIMATE = (1 << 6);\r\n        \r\n        const FFTW_R2HC = 0;\r\n        const FFTW_HC2R = 1;\r\n        const FFTW_DHT = 2;\r\n        const FFTW_REDFT00 = 3;\r\n        const FFTW_REDFT10 = 5;\r\n        const FFTW_REDFT01 = 4;\r\n        const FFTW_REDFT11 = 6;\r\n        const FFTW_RODFT00 = 7;\r\n        const FFTW_RODFT10 = 9;\r\n        const FFTW_RODFT01 = 8;\r\n        const FFTW_RODFT11 = 10;\r\n        \r\n        const FFTW_FORWARD = -1;\r\n        const FFTW_BACKWARD = 1;\r\n\r\n        const {\r\n            _fftwf_plan_dft_r2c_1d,\r\n            _fftwf_plan_dft_c2r_1d,\r\n            _fftwf_plan_r2r_1d,\r\n            _fftwf_plan_r2r_2d,\r\n            _fftwf_plan_dft_1d,\r\n            _fftwf_plan_dft_2d,\r\n            _fftwf_execute,\r\n            _fftwf_destroy_plan,\r\n            _fftwf_free,\r\n            _fftwf_malloc\r\n        } = fftwModule;\r\n        \r\n        class C2CFFT2D implements FFT {\r\n            n0: number;\r\n            n1: number;\r\n            size: number;\r\n            c0ptr: number;\r\n            c1ptr: number;\r\n            c0: Float32Array;\r\n            c1: Float32Array;\r\n            fplan: number;\r\n            iplan: number;\r\n            constructor(n0: number, n1: number) {\r\n                this.n0 = n0;\r\n                this.n1 = n1;\r\n\r\n                this.size = n0 * n1;\r\n                this.c0ptr = _fftwf_malloc(2 * 4 * this.size);\r\n                this.c1ptr = _fftwf_malloc(2 * 4 * this.size);\r\n\r\n                this.c0 = new Float32Array(fftwModule.HEAPU8.buffer, this.c0ptr, 2 * this.size); // two for complex\r\n                this.c1 = new Float32Array(fftwModule.HEAPU8.buffer, this.c1ptr, 2 * this.size);\r\n\r\n                this.fplan = _fftwf_plan_dft_2d(this.n0, this.n1, this.c0ptr, this.c1ptr, FFTW_FORWARD, FFTW_ESTIMATE);\r\n                this.iplan = _fftwf_plan_dft_2d(this.n0, this.n1, this.c1ptr, this.c0ptr, FFTW_BACKWARD, FFTW_ESTIMATE);\r\n            }\r\n\r\n            forward(cpx: ArrayLike<number> | ((cpx: Float32Array) => any)) {\r\n                if (typeof cpx === \"function\") cpx(this.c0);\r\n                else this.c0.set(cpx);\r\n                _fftwf_execute(this.fplan);\r\n                return this.c1;\r\n            }\r\n\r\n            inverse(cpx: ArrayLike<number> | ((cpx: Float32Array) => any)) {\r\n                if (typeof cpx === \"function\") cpx(this.c1);\r\n                else this.c1.set(cpx);\r\n                _fftwf_execute(this.iplan);\r\n                return this.c0;\r\n            }\r\n\r\n            dispose() {\r\n                _fftwf_destroy_plan(this.fplan);\r\n                _fftwf_destroy_plan(this.iplan);\r\n                _fftwf_free(this.c0ptr);\r\n                _fftwf_free(this.c1ptr);\r\n            }\r\n        }\r\n\r\n        class C2CFFT1D implements FFT {\r\n            size: number;\r\n            c0ptr: number;\r\n            c1ptr: number;\r\n            c0: Float32Array;\r\n            c1: Float32Array;\r\n            fplan: number;\r\n            iplan: number;\r\n            constructor(size: number) {\r\n                this.size = size;\r\n                // this.c0ptr = _fftwf_malloc(2*4*size + 2*4*size);\r\n                // this.c1ptr = this.c0ptr;\r\n                this.c0ptr = _fftwf_malloc(2 * 4 * size);\r\n                this.c1ptr = _fftwf_malloc(2 * 4 * size);\r\n\r\n                this.c0 = new Float32Array(fftwModule.HEAPU8.buffer, this.c0ptr, 2 * size);\r\n                this.c1 = new Float32Array(fftwModule.HEAPU8.buffer, this.c1ptr, 2 * size);\r\n\r\n                this.fplan = _fftwf_plan_dft_1d(size, this.c0ptr, this.c1ptr, FFTW_FORWARD, FFTW_ESTIMATE);\r\n                this.iplan = _fftwf_plan_dft_1d(size, this.c1ptr, this.c0ptr, FFTW_BACKWARD, FFTW_ESTIMATE);\r\n            }\r\n\r\n            forward(cpx: ArrayLike<number> | ((cpx: Float32Array) => any)) {\r\n                if (typeof cpx === \"function\") cpx(this.c0);\r\n                else this.c0.set(cpx);\r\n                _fftwf_execute(this.fplan);\r\n                return this.c1;\r\n            }\r\n\r\n            inverse(cpx: ArrayLike<number> | ((cpx: Float32Array) => any)) {\r\n                if (typeof cpx === \"function\") cpx(this.c1);\r\n                else this.c1.set(cpx);\r\n                _fftwf_execute(this.iplan);\r\n                return this.c0;\r\n            }\r\n\r\n            dispose() {\r\n                _fftwf_destroy_plan(this.fplan);\r\n                _fftwf_destroy_plan(this.iplan);\r\n                _fftwf_free(this.c0ptr);\r\n                _fftwf_free(this.c1ptr);\r\n            }\r\n        }\r\n\r\n        class R2CFFT1D implements FFT {\r\n            size: number;\r\n            rptr: number;\r\n            cptr: number;\r\n            r: Float32Array;\r\n            c: Float32Array;\r\n            fplan: number;\r\n            iplan: number;\r\n            constructor(size: number) {\r\n                this.size = size;\r\n                this.rptr = _fftwf_malloc(size * 4 + (size + 2) * 4);\r\n                this.cptr = this.rptr + size * 4;\r\n\r\n                this.r = new Float32Array(fftwModule.HEAPU8.buffer, this.rptr, size);\r\n                this.c = new Float32Array(fftwModule.HEAPU8.buffer, this.cptr, size + 2);\r\n\r\n                this.fplan = _fftwf_plan_dft_r2c_1d(size, this.rptr, this.cptr, FFTW_ESTIMATE);\r\n                this.iplan = _fftwf_plan_dft_c2r_1d(size, this.cptr, this.rptr, FFTW_ESTIMATE);\r\n            }\r\n\r\n            forward(real: ArrayLike<number> | ((real: Float32Array) => any)) {\r\n                if (typeof real === \"function\") real(this.r);\r\n                else this.r.set(real);\r\n                _fftwf_execute(this.fplan);\r\n                return this.c;\r\n            }\r\n\r\n            inverse(cpx: ArrayLike<number> | ((cpx: Float32Array) => any)) {\r\n                if (typeof cpx === \"function\") cpx(this.c);\r\n                else this.c.set(cpx);\r\n                _fftwf_execute(this.iplan);\r\n                return this.r;\r\n            }\r\n\r\n            dispose() {\r\n                _fftwf_destroy_plan(this.fplan);\r\n                _fftwf_destroy_plan(this.iplan);\r\n                _fftwf_free(this.rptr);\r\n            }\r\n        }\r\n\r\n        const r2r1dFactory = (forwardType: number, inverseType: number) => {\r\n            return class R2RFFT1D implements FFT {\r\n                size: number;\r\n                rptr: number;\r\n                cptr: number;\r\n                r: Float32Array;\r\n                c: Float32Array;\r\n                fplan: number;\r\n                iplan: number;\r\n                constructor(size: number) {\r\n                    this.size = size;\r\n                    this.rptr = _fftwf_malloc(size * 4 + size * 4);\r\n\r\n                    this.cptr = this.rptr;\r\n                    this.r = new Float32Array(fftwModule.HEAPU8.buffer, this.rptr, size);\r\n                    this.c = new Float32Array(fftwModule.HEAPU8.buffer, this.cptr, size);\r\n\r\n                    this.fplan = _fftwf_plan_r2r_1d(size, this.rptr, this.cptr, forwardType, FFTW_ESTIMATE);\r\n                    this.iplan = _fftwf_plan_r2r_1d(size, this.cptr, this.rptr, inverseType, FFTW_ESTIMATE);\r\n                }\r\n\r\n                forward(real: ArrayLike<number> | ((real: Float32Array) => any)) {\r\n                    if (typeof real === \"function\") real(this.r);\r\n                    else this.r.set(real);\r\n                    _fftwf_execute(this.fplan);\r\n                    return this.c;\r\n                }\r\n\r\n                inverse(cpx: ArrayLike<number> | ((cpx: Float32Array) => any)) {\r\n                    if (typeof cpx === \"function\") cpx(this.c);\r\n                    else this.c.set(cpx);\r\n                    _fftwf_execute(this.iplan);\r\n                    return this.r;\r\n                }\r\n\r\n                dispose() {\r\n                    _fftwf_destroy_plan(this.fplan);\r\n                    _fftwf_destroy_plan(this.iplan);\r\n                    _fftwf_free(this.rptr);\r\n                }\r\n            }\r\n        };\r\n\r\n        const r2r2dFactory = (forwardType: number, inverseType: number) => {\r\n            return class R2RFFT2D implements FFT {\r\n                n0: number;\r\n                n1: number;\r\n                size: number;\r\n                rptr: number;\r\n                cptr: number;\r\n                r: Float32Array;\r\n                c: Float32Array;\r\n                fplan: number;\r\n                iplan: number;\r\n                constructor(n0: number, n1: number) {\r\n                    this.n0 = n0;\r\n                    this.n1 = n1;\r\n\r\n                    this.size = this.n0 * this.n1;\r\n                    this.rptr = _fftwf_malloc(this.size * 4);\r\n                    this.cptr = _fftwf_malloc(this.size * 4);\r\n\r\n                    this.r = new Float32Array(fftwModule.HEAPU8.buffer, this.rptr, this.size);\r\n                    this.c = new Float32Array(fftwModule.HEAPU8.buffer, this.cptr, this.size);\r\n\r\n                    this.fplan = _fftwf_plan_r2r_2d(this.n0, this.n1, this.rptr, this.cptr, forwardType, forwardType, FFTW_ESTIMATE);\r\n                    this.iplan = _fftwf_plan_r2r_2d(this.n0, this.n1, this.cptr, this.rptr, inverseType, inverseType, FFTW_ESTIMATE);\r\n                }\r\n                \r\n                forward(real: ArrayLike<number> | ((real: Float32Array) => any)) {\r\n                    if (typeof real === \"function\") real(this.r);\r\n                    else this.r.set(real);\r\n                    _fftwf_execute(this.fplan);\r\n                    return this.c;\r\n                }\r\n\r\n                inverse(cpx: ArrayLike<number> | ((cpx: Float32Array) => any)) {\r\n                    if (typeof cpx === \"function\") cpx(this.c);\r\n                    else this.c.set(cpx);\r\n                    _fftwf_execute(this.iplan);\r\n                    return this.r;\r\n                }\r\n\r\n                dispose() {\r\n                    _fftwf_destroy_plan(this.fplan);\r\n                    _fftwf_destroy_plan(this.iplan);\r\n                    _fftwf_free(this.rptr);\r\n                }\r\n            }\r\n        };\r\n\r\n        this.c2c = {\r\n            FFT1D: C2CFFT1D,\r\n            FFT2D: C2CFFT2D\r\n        };\r\n        this.r2c = {\r\n            FFT1D: R2CFFT1D\r\n        };\r\n        this.r2r = {\r\n            FFT1D: r2r1dFactory(FFTW_R2HC, FFTW_HC2R),\r\n            DCT1D: r2r1dFactory(FFTW_REDFT10, FFTW_REDFT01),\r\n            DST1D: r2r1dFactory(FFTW_RODFT10, FFTW_RODFT01),\r\n            FFT2D: r2r2dFactory(FFTW_R2HC, FFTW_HC2R),\r\n            DCT2D: r2r2dFactory(FFTW_REDFT10, FFTW_REDFT01),\r\n            DST2D: r2r2dFactory(FFTW_RODFT10, FFTW_RODFT01)\r\n        }\r\n    }\r\n}\r\n\r\nexport default FFTW;\r\n"],
  "mappings": "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",
  "names": []
}
