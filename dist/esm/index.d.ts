// Generated by dts-bundle-generator v6.2.0

/// <reference types="emscripten" />
/// <reference types="node" />

export declare type FFTWModuleFactory = EmscriptenModuleFactory<FFTWModule>;
export interface FFTWModule extends EmscriptenModule {
	ccall: typeof ccall;
	cwrap: typeof cwrap;
}
export interface FFT {
	forward(arr: ArrayLike<number>): Float32Array;
	inverse(arr: ArrayLike<number>): Float32Array;
	dispose(): void;
}
/**
 * Load fftw-wasm files, than instantiate fftw
 * @param jsFile path to `libfftw3.js`
 * @param wasmFile path to `libfftw3.wasm`
 */
export declare const instantiateFFTWModule: (jsFile: string, wasmFile?: string) => Promise<FFTWModule>;
export declare class FFTW {
	c2c: {
		FFT1D: new (size: number) => FFT;
		FFT2D: new (n0: number, n1: number) => FFT;
	};
	r2c: {
		FFT1D: new (size: number) => FFT;
	};
	r2r: {
		FFT1D: new (size: number) => FFT;
		DCT1D: new (size: number) => FFT;
		DST1D: new (size: number) => FFT;
		FFT2D: new (n0: number, n1: number) => FFT;
		DCT2D: new (n0: number, n1: number) => FFT;
		DST2D: new (n0: number, n1: number) => FFT;
	};
	constructor(fftwModule: FFTWModule);
}
declare const _default: {
	instantiateFFTWModule: (jsFile: string, wasmFile?: string) => Promise<FFTWModule>;
	FFTW: typeof FFTW;
};
export default _default;

export {};
