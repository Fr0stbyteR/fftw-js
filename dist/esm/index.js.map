{
  "version": 3,
  "sources": ["../../src/instantiateFFTWModuleFromFile.ts", "../../src/FFTW.ts"],
  "sourcesContent": ["import type { FFTWModuleFactory } from \"./types\";\n\n/**\n * Load emcc-wasm files, than instantiate it\n * @param jsFile path to `emcc-wasm.js`\n * @param wasmFile path to `emcc-wasm.wasm`\n * @param dataFile path to `emcc-wasm.data`\n */\nconst instantiateFFTWModuleFromFile = async (jsFile: string, wasmFile = jsFile.replace(/c?js$/, \"wasm\"), dataFile = jsFile.replace(/c?js$/, \"data\")) => {\n    let Module: FFTWModuleFactory;\n    // let dataBinary: ArrayBuffer;\n    let wasmBinary: Uint8Array | ArrayBuffer;\n    const jsCodeHead = /var (.+) = \\(\\(\\) => \\{/;\n    if (typeof globalThis.fetch === \"function\") {\n        let jsCode = await (await fetch(jsFile)).text();\n        jsCode = `${jsCode}\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = URL.createObjectURL(new Blob([jsCode], { type: \"text/javascript\" }));\n        Module = (await import(/* webpackIgnore: true */jsFileMod)).default;\n        // dataBinary = await (await fetch(dataFile)).arrayBuffer();\n        wasmBinary = new Uint8Array(await (await fetch(wasmFile)).arrayBuffer());\n    } else {\n        const { promises: fs } = await import(\"fs\");\n        const { pathToFileURL } = await import(\"url\");\n        let jsCode = (await fs.readFile(jsFile, { encoding: \"utf-8\" }));\n        jsCode = `\nimport process from \"process\";\nimport * as path from \"path\";\nimport { createRequire } from \"module\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst __filename = fileURLToPath(import.meta.url);\nconst require = createRequire(import.meta.url);\n\n${jsCode}\n\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = jsFile.replace(/c?js$/, \"mjs\");\n        await fs.writeFile(jsFileMod, jsCode);\n        Module = (await import(/* webpackIgnore: true */pathToFileURL(jsFileMod).href)).default;\n        await fs.unlink(jsFileMod);\n        // dataBinary = (await fs.readFile(dataFile)).buffer;\n        wasmBinary = (await fs.readFile(wasmFile)).buffer;\n    }\n    const module = await Module({\n        wasmBinary/*,\n        getPreloadedPackage: (remotePackageName: string, remotePackageSize: number) => {\n            if (remotePackageName === \"libfaust-wasm.data\") return dataBinary;\n            return new ArrayBuffer(0);\n        }*/\n    });\n    return module;\n};\n\nexport default instantiateFFTWModuleFromFile;\n", "import type { FFT, FFTWModule } from \"./types\";\r\n\r\nclass FFTW {\r\n    c2c: { FFT1D: new (size: number) => FFT; FFT2D: new (n0: number, n1: number) => FFT; };\r\n    r2c: { FFT1D: new (size: number) => FFT; };\r\n    r2r: { FFT1D: new (size: number) => FFT; DCT1D: new (size: number) => FFT; DST1D: new (size: number) => FFT; FFT2D: new (n0: number, n1: number) => FFT; DCT2D: new (n0: number, n1: number) => FFT; DST2D: new (n0: number, n1: number) => FFT; };\r\n    constructor(fftwModule: FFTWModule) {\r\n        const FFTW_ESTIMATE = (1 << 6);\r\n        \r\n        const FFTW_R2HC = 0;\r\n        const FFTW_HC2R = 1;\r\n        const FFTW_DHT = 2;\r\n        const FFTW_REDFT00 = 3;\r\n        const FFTW_REDFT10 = 5;\r\n        const FFTW_REDFT01 = 4;\r\n        const FFTW_REDFT11 = 6;\r\n        const FFTW_RODFT00 = 7;\r\n        const FFTW_RODFT10 = 9;\r\n        const FFTW_RODFT01 = 8;\r\n        const FFTW_RODFT11 = 10;\r\n        \r\n        const FFTW_FORWARD = -1;\r\n        const FFTW_BACKWARD = 1;\r\n\r\n        const {\r\n            _fftwf_plan_dft_r2c_1d,\r\n            _fftwf_plan_dft_c2r_1d,\r\n            _fftwf_plan_r2r_1d,\r\n            _fftwf_plan_r2r_2d,\r\n            _fftwf_plan_dft_1d,\r\n            _fftwf_plan_dft_2d,\r\n            _fftwf_execute,\r\n            _fftwf_destroy_plan,\r\n            _fftwf_free,\r\n            _fftwf_malloc\r\n        } = fftwModule;\r\n        \r\n        class C2CFFT2D implements FFT {\r\n            n0: number;\r\n            n1: number;\r\n            size: number;\r\n            c0ptr: number;\r\n            c1ptr: number;\r\n            c0: Float32Array;\r\n            c1: Float32Array;\r\n            fplan: number;\r\n            iplan: number;\r\n            constructor(n0: number, n1: number) {\r\n                this.n0 = n0;\r\n                this.n1 = n1;\r\n\r\n                this.size = n0 * n1;\r\n                this.c0ptr = _fftwf_malloc(2 * 4 * this.size);\r\n                this.c1ptr = _fftwf_malloc(2 * 4 * this.size);\r\n\r\n                this.c0 = new Float32Array(fftwModule.HEAPU8.buffer, this.c0ptr, 2 * this.size); // two for complex\r\n                this.c1 = new Float32Array(fftwModule.HEAPU8.buffer, this.c1ptr, 2 * this.size);\r\n\r\n                this.fplan = _fftwf_plan_dft_2d(this.n0, this.n1, this.c0ptr, this.c1ptr, FFTW_FORWARD, FFTW_ESTIMATE);\r\n                this.iplan = _fftwf_plan_dft_2d(this.n0, this.n1, this.c1ptr, this.c0ptr, FFTW_BACKWARD, FFTW_ESTIMATE);\r\n            }\r\n\r\n            forward(cpx: ArrayLike<number>) {\r\n                this.c0.set(cpx);\r\n                _fftwf_execute(this.fplan);\r\n                return new Float32Array(fftwModule.HEAPU8.buffer, this.c1ptr, 2 * this.size);\r\n            }\r\n\r\n            inverse(cpx: ArrayLike<number>) {\r\n                this.c1.set(cpx);\r\n                _fftwf_execute(this.iplan);\r\n                return new Float32Array(fftwModule.HEAPU8.buffer, this.c0ptr, 2 * this.size);\r\n            }\r\n\r\n            dispose() {\r\n                _fftwf_destroy_plan(this.fplan);\r\n                _fftwf_destroy_plan(this.iplan);\r\n                _fftwf_free(this.c0ptr);\r\n                _fftwf_free(this.c1ptr);\r\n            }\r\n        }\r\n\r\n        class C2CFFT1D implements FFT {\r\n            size: number;\r\n            c0ptr: number;\r\n            c1ptr: number;\r\n            c0: Float32Array;\r\n            c1: Float32Array;\r\n            fplan: number;\r\n            iplan: number;\r\n            constructor(size: number) {\r\n                this.size = size;\r\n                // this.c0ptr = _fftwf_malloc(2*4*size + 2*4*size);\r\n                // this.c1ptr = this.c0ptr;\r\n                this.c0ptr = _fftwf_malloc(2 * 4 * this.size);\r\n                this.c1ptr = _fftwf_malloc(2 * 4 * this.size);\r\n\r\n                this.c0 = new Float32Array(fftwModule.HEAPU8.buffer, this.c0ptr, 2 * size);\r\n                this.c1 = new Float32Array(fftwModule.HEAPU8.buffer, this.c1ptr, 2 * size);\r\n\r\n                this.fplan = _fftwf_plan_dft_1d(size, this.c0ptr, this.c1ptr, FFTW_FORWARD, FFTW_ESTIMATE);\r\n                this.iplan = _fftwf_plan_dft_1d(size, this.c1ptr, this.c0ptr, FFTW_BACKWARD, FFTW_ESTIMATE);\r\n            }\r\n\r\n            forward(cpx: ArrayLike<number>) {\r\n                this.c0.set(cpx);\r\n                _fftwf_execute(this.fplan);\r\n                return new Float32Array(fftwModule.HEAPU8.buffer, this.c1ptr, 2 * this.size);\r\n            }\r\n\r\n            inverse(cpx: ArrayLike<number>) {\r\n                this.c1.set(cpx);\r\n                _fftwf_execute(this.iplan);\r\n                return new Float32Array(fftwModule.HEAPU8.buffer, this.c0ptr, 2 * this.size);\r\n            }\r\n\r\n            dispose() {\r\n                _fftwf_destroy_plan(this.fplan);\r\n                _fftwf_destroy_plan(this.iplan);\r\n                _fftwf_free(this.c0ptr);\r\n                _fftwf_free(this.c1ptr);\r\n            }\r\n        }\r\n\r\n        class R2CFFT1D implements FFT {\r\n            size: number;\r\n            rptr: number;\r\n            cptr: number;\r\n            r: Float32Array;\r\n            c: Float32Array;\r\n            fplan: number;\r\n            iplan: number;\r\n            constructor(size: number) {\r\n                this.size = size;\r\n                this.rptr = _fftwf_malloc(size * 4 + (size + 2) * 4);\r\n                this.cptr = this.rptr + size * 4;\r\n\r\n                this.r = new Float32Array(fftwModule.HEAPU8.buffer, this.rptr, size);\r\n                this.c = new Float32Array(fftwModule.HEAPU8.buffer, this.cptr, size + 2);\r\n\r\n                this.fplan = _fftwf_plan_dft_r2c_1d(size, this.rptr, this.cptr, FFTW_ESTIMATE);\r\n                this.iplan = _fftwf_plan_dft_c2r_1d(size, this.cptr, this.rptr, FFTW_ESTIMATE);\r\n            }\r\n\r\n            forward(real: ArrayLike<number>) {\r\n                this.r.set(real);\r\n                _fftwf_execute(this.fplan);\r\n                return new Float32Array(fftwModule.HEAPU8.buffer, this.cptr, this.size + 2);\r\n            }\r\n\r\n            inverse(cpx: ArrayLike<number>) {\r\n                this.c.set(cpx);\r\n                _fftwf_execute(this.iplan);\r\n                return new Float32Array(fftwModule.HEAPU8.buffer, this.rptr, this.size);\r\n            }\r\n\r\n            dispose() {\r\n                _fftwf_destroy_plan(this.fplan);\r\n                _fftwf_destroy_plan(this.iplan);\r\n                _fftwf_free(this.rptr);\r\n            }\r\n        }\r\n\r\n        const r2r1dFactory = (forwardType: number, inverseType: number) => {\r\n            return class R2RFFT1D implements FFT {\r\n                size: number;\r\n                rptr: number;\r\n                cptr: number;\r\n                r: Float32Array;\r\n                c: Float32Array;\r\n                fplan: number;\r\n                iplan: number;\r\n                constructor(size: number) {\r\n                    this.size = size;\r\n                    this.rptr = _fftwf_malloc(size * 4 + size * 4);\r\n\r\n                    this.cptr = this.rptr;\r\n                    this.r = new Float32Array(fftwModule.HEAPU8.buffer, this.rptr, size);\r\n                    this.c = new Float32Array(fftwModule.HEAPU8.buffer, this.cptr, size);\r\n\r\n                    this.fplan = _fftwf_plan_r2r_1d(size, this.rptr, this.cptr, forwardType, FFTW_ESTIMATE);\r\n                    this.iplan = _fftwf_plan_r2r_1d(size, this.cptr, this.rptr, inverseType, FFTW_ESTIMATE);\r\n                }\r\n\r\n                forward(real: ArrayLike<number>) {\r\n                    this.r.set(real);\r\n                    _fftwf_execute(this.fplan);\r\n                    return new Float32Array(fftwModule.HEAPU8.buffer, this.cptr, this.size);\r\n                }\r\n\r\n                inverse(cpx: ArrayLike<number>) {\r\n                    this.c.set(cpx);\r\n                    _fftwf_execute(this.iplan);\r\n                    return new Float32Array(fftwModule.HEAPU8.buffer, this.rptr, this.size);\r\n                }\r\n\r\n                dispose() {\r\n                    _fftwf_destroy_plan(this.fplan);\r\n                    _fftwf_destroy_plan(this.iplan);\r\n                    _fftwf_free(this.rptr);\r\n                }\r\n            }\r\n        };\r\n\r\n        const r2r2dFactory = (forwardType: number, inverseType: number) => {\r\n            return class R2RFFT2D implements FFT {\r\n                n0: number;\r\n                n1: number;\r\n                size: number;\r\n                rptr: number;\r\n                cptr: number;\r\n                r: Float32Array;\r\n                c: Float32Array;\r\n                fplan: number;\r\n                iplan: number;\r\n                constructor(n0: number, n1: number) {\r\n                    this.n0 = n0;\r\n                    this.n1 = n1;\r\n\r\n                    this.size = this.n0 * this.n1;\r\n                    this.rptr = _fftwf_malloc(this.size * 4);\r\n                    this.cptr = _fftwf_malloc(this.size * 4);\r\n\r\n                    this.r = new Float32Array(fftwModule.HEAPU8.buffer, this.rptr, this.size);\r\n                    this.c = new Float32Array(fftwModule.HEAPU8.buffer, this.cptr, this.size);\r\n\r\n                    this.fplan = _fftwf_plan_r2r_2d(this.n0, this.n1, this.rptr, this.cptr, forwardType, forwardType, FFTW_ESTIMATE);\r\n                    this.iplan = _fftwf_plan_r2r_2d(this.n0, this.n1, this.cptr, this.rptr, inverseType, inverseType, FFTW_ESTIMATE);\r\n                }\r\n                \r\n                forward(real: ArrayLike<number>) {\r\n                    this.r.set(real);\r\n                    _fftwf_execute(this.fplan);\r\n                    return new Float32Array(fftwModule.HEAPU8.buffer, this.cptr, this.size);\r\n                }\r\n\r\n                inverse(cpx: ArrayLike<number>) {\r\n                    this.c.set(cpx);\r\n                    _fftwf_execute(this.iplan);\r\n                    return new Float32Array(fftwModule.HEAPU8.buffer, this.rptr, this.size);\r\n                }\r\n\r\n                dispose() {\r\n                    _fftwf_destroy_plan(this.fplan);\r\n                    _fftwf_destroy_plan(this.iplan);\r\n                    _fftwf_free(this.rptr);\r\n                }\r\n            }\r\n        };\r\n\r\n        this.c2c = {\r\n            FFT1D: C2CFFT1D,\r\n            FFT2D: C2CFFT2D\r\n        };\r\n        this.r2c = {\r\n            FFT1D: R2CFFT1D\r\n        };\r\n        this.r2r = {\r\n            FFT1D: r2r1dFactory(FFTW_R2HC, FFTW_HC2R),\r\n            DCT1D: r2r1dFactory(FFTW_REDFT10, FFTW_REDFT01),\r\n            DST1D: r2r1dFactory(FFTW_RODFT10, FFTW_RODFT01),\r\n            FFT2D: r2r2dFactory(FFTW_R2HC, FFTW_HC2R),\r\n            DCT2D: r2r2dFactory(FFTW_REDFT10, FFTW_REDFT01),\r\n            DST2D: r2r2dFactory(FFTW_RODFT10, FFTW_RODFT01)\r\n        }\r\n    }\r\n}\r\n\r\nexport default FFTW;\r\n"],
  "mappings": "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",
  "names": []
}
